{"version":3,"sources":["Utilities/shuffle.js","Utilities/constants.js","Components/Gameboard/Gameboard.js","Models/Ship.js","images/hit.gif","images/waves.gif","images/sunk.gif","Components/Message/Message.js","Components/Shield/Shield.js","Components/Score/Score.js","App.js","index.js"],"names":["shuffleArray","array","i","length","j","Math","floor","random","shipTypes","gridTemplate","utils","getOrientation","getRows","rowLength","index","rows","push","slice","getColumns","columnHeight","columns","column","getAvailable","size","available","max","positions","forEach","item","includes","getCoordinates","grid","allPositions","availablePositions","selectedPosition","shift","coordinates","position","markGrid","type","indexOfMatch","findIndex","value","updateTargets","targetArray","isHit","coords","shipArray","indexOfShip","ship","Object","keys","hit","Gameboard","props","useState","targets","setTargets","ships","setShips","placeShips","shipType","key","this","isSunk","values","every","Ship","receiveAttack","targetedShip","action","payload","target","status","window","setTimeout","displayAttacks","map","className","data-coordinate","toString","useEffect","sunkShips","isGameOver","isVisible","onClick","event","preventDefault","parent","currentTarget","attackTarget","dataset","coordinate","classList","add","Message","message","src","hitImg","alt","wavesImg","sunkImg","Shield","style","actionType","buttonText","isUp","Score","player1","setPlayer1","player2","setPlayer2","player","player1Status","hits","data-hit","data-ship","player2Status","id","initialState","turn","shielded","init","reducer","state","nextTurn","Error","App","useReducer","dispatch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc6e6290.chunk.js","sourcesContent":["// Shuffle helper function to randomize the order that ships are processed with each new game.\nexport const shuffleArray = function(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}","export const shipTypes = [\n    ['Carrier', 5], \n    ['Battleship', 4], \n    ['Cruiser', 3], \n    ['Submarine', 3], \n    ['Destroyer', 2]\n];\n\nexport const gridTemplate = [\n    'A1','B1','C1','D1','E1','F1',\n    'A2','B2','C2','D2','E2','F2',\n    'A3','B3','C3','D3','E3','F3',\n    'A4','B4','C4','D4','E4','F4',\n    'A5','B5','C5','D5','E5','F5',\n    'A6','B6','C6','D6','E6','F6',\n];\n\nexport const startingScore = [\n    {\n        type: 'Carrier',\n        coordinates: {'1': false, '2': false, '3': false, '4': false, '5': false}\n    },\n    {\n        type: 'Battleship',\n        coordinates: {'1': false, '2': false, '3': false, '4': false}\n    },\n    {\n        type: 'Cruiser',\n        coordinates: {'1': false, '2': false, '3': false}\n    },\n    {\n        type: 'Submarine',\n        coordinates: {'1': false, '2': false, '3': false}\n    },\n    {\n        type: 'Destroyer',\n        coordinates: {'1': false, '2': false}\n    }\n]","import { Ship } from '../../Models/Ship'\nimport { shuffleArray } from '../../Utilities/shuffle.js'\nimport { useState, useEffect } from 'react'\nimport './Gameboard.css'\nimport { shipTypes, gridTemplate } from '../../Utilities/constants'\n\nexport const utils = function() {\n    const getOrientation = function() {\n        const random = Math.floor(Math.random() * Math.floor(2));\n        const orientation = (random === 0) ? 'horizontal' : 'vertical' ;\n        return orientation;\n    }\n    const getRows = function(array, rowLength) {\n        let rows = [];\n        let index;\n        for (index = 0; index <= 30; index += rowLength) {\n            rows.push(array.slice(index, index + rowLength));\n        }\n        return rows;\n    }\n    const getColumns = function(array, columnHeight) {\n        let columns = [];\n        for (let i = 0; i < columnHeight; i++) {\n            const column = [\n                array[i], \n                array[i+6], \n                array[i+(2*columnHeight)], \n                array[i+(3*columnHeight)], \n                array[i+(4*columnHeight)], \n                array[i+(5*columnHeight)]\n            ]\n            columns.push(column);\n        }\n        return columns;\n    }\n    const getAvailable = function(array, length, size) {\n        // Find all available correctly-sized positions, e.g., [[A1, A2, A3], [B1, B2, B3]].\n        const available = [];\n        const max = length - size;\n        let positions = null;\n        array.forEach((item) => {\n            for (let i = 0; i <= max; i++) {\n                positions = item.slice(i, i + size);\n                if (positions.includes(shipTypes[0][0])) {\n                    continue;\n                } else if (positions.includes(shipTypes[1][0])) {\n                    continue;\n                } else if (positions.includes(shipTypes[2][0])) {\n                    continue;\n                } else if (positions.includes(shipTypes[3][0])) {\n                    continue;\n                } else if (positions.includes(shipTypes[4][0])) {\n                    continue;\n                } else {\n                    available.push(positions)\n                }\n            }\n        })\n        return available;\n    }\n    const getCoordinates = function(grid, size) {\n        // Returns vertical or horizontal.\n        const orientation = getOrientation();\n        const allPositions = (orientation === 'horizontal') ? getRows(grid, 6) : getColumns(grid, 6);\n        const availablePositions = getAvailable(allPositions, 6, size)\n        const shuffledOptions = shuffleArray(availablePositions.slice())\n        const selectedPosition = shuffledOptions.shift();\n        const coordinates = {};\n        // Add 'false' to each, to indicate that position is not hit.\n        selectedPosition.forEach(position => {\n            coordinates[position] = false;\n        })\n        return coordinates;\n    }\n    const markGrid = function(array, coordinates, type) {\n        for (let i = 0; i < coordinates.length; i++) {\n            const isMatch = (value) => value === coordinates[i];\n            const indexOfMatch = array.findIndex(isMatch);\n            array[indexOfMatch] = type;\n        }\n        return array.slice();\n    }\n    const isHit = function(shipArray, coords) {\n        const isShip = (ship) => Object.keys(ship.coordinates).includes(coords);\n        const indexOfShip = shipArray.findIndex(isShip);\n        if (indexOfShip === -1) {\n            return { hit: false, index: null };\n        } else {\n            return { hit: true, index: indexOfShip };\n        }\n    }\n    const updateTargets = function(targetArray, isHit, coords) {\n        const isMatch = (value) => value === coords;\n        const indexOfMatch = targetArray.findIndex(isMatch);\n        if (isHit) {\n            targetArray[indexOfMatch] = 'hit';\n        } else {\n            targetArray[indexOfMatch] = 'miss';\n        }\n        return targetArray.slice();\n    }\n    return { getOrientation, getRows, getColumns, getAvailable, getCoordinates, markGrid, updateTargets, isHit }\n}();\n\nexport const Gameboard = function(props) {\n\n    const [targets, setTargets] = useState(gridTemplate);\n\n    const [ships, setShips] = useState([]);\n\n    /* placeShips() fills the `ships` state array with Ship objects. For example: \n    [\n        {\n            type: 'Destroyer'\n            coordinates: {'A1': false, 'B1': false}\n            hit: hit();\n            isSunk: isSunk();\n        }\n        {\n            type: 'Cruiser'\n            coordinates: {'A2': false, 'B2': false, 'C2': false}\n            hit: hit();\n            isSunk: isSunk();\n        }\n        ...\n    ] */\n    const placeShips = function() {\n        let grid = gridTemplate.slice();\n        const ships = [];\n        shuffleArray(shipTypes);\n        shipTypes.forEach(shipType => {\n            const type = shipType[0];\n            const size = shipType[1];\n            const coordinates = utils.getCoordinates(grid, size);\n            const ship = Ship(type, coordinates, size);\n            ships.push(ship);\n            grid = utils.markGrid(grid, Object.keys(coordinates), type);\n        });\n        setShips(ships);\n    }\n\n    // Calls isSunk() on each Ship. If 5 Ships are sunk, executes callback gameDidEnd to let App know.\n    const isGameOver = function() {\n        let sunkShips = [];\n        ships.forEach(ship => {\n            if (ship.isSunk() === true) {\n                sunkShips.push(true)\n            }\n        })\n        if (sunkShips.length === 5) {\n            props.action({type: 'gameover'});\n        }\n    }\n\n    // Takes a single coordinate, checks if that is part of a ship, and updates the ship accordingly.\n    // Updates state, then lets App know the turn is over.\n    const receiveAttack = function(coords) {\n        const targetedShip = utils.isHit(ships, coords);\n        if (targetedShip.hit) {\n            const ship = ships[targetedShip.index];\n            ship.hit(coords);\n            if (ship.isSunk()) {\n                props.action({type: 'sunk', payload: {target: ship.type, status: ships}})\n            } else {\n                props.action({type: 'hit', payload: {target: ship.type, status: ships}})\n            }\n        } else {\n            props.action({type: 'miss'})\n        }\n        setTargets(utils.updateTargets(targets.slice(), targetedShip.hit, coords));\n        window.setTimeout(props.action, 3*1000, {type: 'turnOver'})\n    }\n\n    // Create a div for each potential attack target.\n    const displayAttacks = targets.map((coords, index) =>\n        <button \n            key={coords.toString() + index}\n            className={index} \n            data-coordinate={coords}\n        >\n            {coords}\n        </button>\n    );\n\n    useEffect(() => {\n        placeShips();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        isGameOver();\n    })\n\n    const isVisible = props.isVisible;\n\n    if (isVisible) {\n        return (\n            <div className=\"gameboard\">\n                <div \n                    className=\"grid active\"\n                    onClick={(event) => {\n                        event.preventDefault();\n                        const parent = event.currentTarget;\n                        const elem = event.target;\n                        const attackTarget = elem.dataset.coordinate;\n                        if (attackTarget) {\n                            parent.classList.add('animate');\n                            props.action({type: 'attack', payload: attackTarget})\n                            window.setTimeout(receiveAttack, 1*1000, attackTarget)\n                        } else {\n                            return;\n                        }\n                    }}\n                >{displayAttacks}</div>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"gameboard\">\n                <div className=\"grid hidden\">{displayAttacks}</div>\n            </div>\n        )\n    }\n}","// Returns an individual Ship object with methods.\nexport const Ship = function(type, coordinates) {\n    // These methods to be called if Gameboard finds an attack corresponds to a target.\n    const hit = function(key) {\n        this.coordinates[key] = true\n    }\n    const isSunk = function() {\n        const hitTargets = Object.values(this.coordinates);\n        const isTrue = (value) => value === true;\n        return hitTargets.every(isTrue)\n    }\n    return {type, coordinates, hit, isSunk}\n}","export default __webpack_public_path__ + \"static/media/hit.f24389d3.gif\";","export default __webpack_public_path__ + \"static/media/waves.20d4f15e.gif\";","export default __webpack_public_path__ + \"static/media/sunk.0dbfaa92.gif\";","import './Message.css'\nimport hitImg from '../../images/hit.gif'\nimport wavesImg from '../../images/waves.gif'\nimport sunkImg from '../../images/sunk.gif'\n\nexport const Message = function(props) {\n    const hit = 'HIT';\n    const miss = 'MISS';\n    const sunk = 'SUNK';\n    if (props.message.includes(hit)) {\n        return (\n            <div className=\"Message topLevel\">\n                <h1>{props.message}</h1>\n                <img src={hitImg} alt=\"hit\"></img>\n            </div>\n        )\n    } else if (props.message.includes(miss)) {\n        return (\n            <div className=\"Message topLevel\">\n                <h1>{props.message}</h1>\n                <img src={wavesImg} alt=\"waves\"></img>\n            </div>\n        )\n    } else if (props.message.includes(sunk)) {\n        return (\n            <div className=\"Message topLevel\">\n                <h1>{props.message}</h1>\n                <img src={sunkImg} alt=\"sunk\"></img>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"Message\">\n                <h1>{props.message}</h1>\n            </div>\n        )\n    }\n}","import './Shield.css'\n\nexport const Shield = function(props) {\n    let style;\n    let actionType;\n    let buttonText;\n    switch (props.message) {\n        case `Let's play Battleship!`:\n            style = 'startScreen';\n            actionType = 'shieldDismissed';\n            buttonText = 'READY!'\n            break;\n        case `Game over!`:\n            style = 'gameOver';\n            actionType = 'playAgain';\n            buttonText = 'PLAY AGAIN'\n            break;\n        default:\n            style = 'Shield';\n            actionType = 'shieldDismissed';\n            buttonText = 'READY!'\n    }\n    if (props.isUp) {\n        return (\n            <div className={style}>\n                <h1>{props.message}</h1>\n                <button onClick={() => {props.action({type: actionType})}}>{buttonText}</button>\n            </div>\n        )\n    } else {\n        return (\n            null\n        )\n    }\n}","import { useState, useEffect } from 'react'\nimport './Score.css'\n\nexport const Score = function(props) {\n    const [player1, setPlayer1] = useState(props.status);\n    const [player2, setPlayer2] = useState(props.status);\n\n    useEffect(() => {\n        if (props.player === 1) {\n            setPlayer1(props.status)\n        } else {\n            setPlayer2(props.status)\n        }\n        // eslint-disable-next-line\n    }, [props.player])\n\n    const player1Status = player1.map((ship, index) => {\n            const hits = Object.values(ship.coordinates).map((value, index) => {\n                return <div key={value.toString() + index + props.player} data-hit={value.toString()}></div>\n            })\n            return <div className=\"ship\" key={ship.toString() + index + props.player} data-ship={ship.type}>\n                        <div className=\"status\">\n                            <h1 className='type'>{ship.type}</h1>\n                            <div className='hits'>{hits}</div>\n                        </div> \n                   </div>\n            }\n        );\n    \n    const player2Status = player2.map((ship, index) => {\n        const hits = Object.values(ship.coordinates).map((value, index) => {\n            return <div key={value.toString() + (index + 5) + (props.player + 1)} data-hit={value.toString()}></div>\n        })\n        return <div className=\"ship\" key={ship.toString() + (index + 5) + (props.player + 1)} data-ship={ship.type}>\n                    <div className=\"status\">\n                        <div className='hits'>{hits}</div>\n                    </div> \n                </div>\n        }\n    );\n\n    return (\n        <div className=\"Score\">\n            <div id='x'>\n                <label>Player 1</label>\n                {player1Status}\n            </div>\n            <div id='y'>\n                <label>Player 2</label>\n                {player2Status}\n            </div>\n        </div>\n    )\n}","import { Gameboard } from './Components/Gameboard/Gameboard.js'\nimport { useReducer } from 'react'\nimport { Message } from \"./Components/Message/Message\";\nimport { Shield } from \"./Components/Shield/Shield\"\nimport { Score } from \"./Components/Score/Score\"\nimport { startingScore } from './Utilities/constants'\nimport './App.css';\n\nconst initialState = {\n  message:`Let's play Battleship!`,\n  status: startingScore, \n  turn: 1,\n  shielded: true,\n};\n\nexport function init(initialState) {\n  return initialState;\n}\n\nexport const reducer = function(state, action) {\n  switch (action.type) {\n    case 'turnOver':\n      const nextTurn = (state.turn === 1) ? 2 : 1;\n      return {message: 'Ready Player ' + nextTurn + '?', status: state.status, turn: nextTurn, shielded: true}\n    case 'shieldDismissed':\n      return {message: 'Awaiting your command...', status: state.status, turn: state.turn, shielded: false}\n    case 'attack':\n      return {message: 'Launching attack on ' + action.payload + ' ...', status: state.status, turn: state.turn, shielded: false};\n    case 'hit':\n      const hitTarget = action.payload.target;\n      const hitStatus = action.payload.status;\n      return {message: hitTarget + ' HIT!', status: hitStatus, turn: state.turn, shielded: false};\n    case 'miss':\n      return {message: 'Attack was a MISS!', status: state.status, turn: state.turn, shielded: false};\n    case 'sunk':\n      const sunkTarget = action.payload.target;\n      const sunkStatus = action.payload.status;\n      return {message: sunkTarget + ' SUNK!', status: sunkStatus, turn: state.turn, shielded: false};\n    case 'gameover':\n      return {message: 'Game Over! Ready to play again?', status: state.status, turn: state.turn, shielded: true};\n    case 'playAgain':\n      return init(initialState);\n    default:\n      throw new Error();\n  }\n}\n\nexport function App() {\n\n  const [state, dispatch] = useReducer(reducer, initialState, init)\n\n  const isVisible = state.turn === 1;\n\n  return (\n    <div className=\"App\">\n      <Shield \n        isUp={state.shielded}\n        message={state.message}\n        action={dispatch}\n      />\n      <Message \n        message={state.message}\n      />\n      <Gameboard\n        isVisible={isVisible}\n        id={\"x\"}\n        action={dispatch}\n      />\n      <Gameboard\n        isVisible={!isVisible}\n        id={\"y\"}\n        action={dispatch} \n      />\n      <Score \n        status={state.status}\n        player={state.turn}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}