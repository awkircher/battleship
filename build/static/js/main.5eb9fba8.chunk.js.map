{"version":3,"sources":["Components/Score.js","Components/Gameboard.js","Utilities/shuffle.js","Models/Ship.js","images/hit.gif","images/waves.gif","images/sunk.gif","Components/Message.js","Components/Shield.js","App.js","index.js"],"names":["Score","props","playerLabel","id","displayShipStatus","status","map","ship","index","sunk","isSunk","toString","hits","Object","values","coordinates","value","data-hit","className","data-sunk","data-ship","type","Gameboard","shipTypes","useState","targets","setTargets","ships","setShips","placeShips","grid","array","i","length","j","Math","floor","random","shuffleArray","forEach","shipType","size","hit","key","this","every","Ship","orientation","available","rows","push","slice","max","positions","row","includes","columns","column","selectedAvailable","shift","indexOfMatch","findIndex","position","console","log","getCoordinates","receiveAttack","coords","current","keys","action","payload","window","setTimeout","displayAttacks","data-coordinate","useEffect","sunkShips","isGameOver","isVisible","onClick","event","preventDefault","parent","currentTarget","elem","target","classList","add","attackTarget","dataset","coordinate","Message","message","src","hitImg","alt","wavesImg","sunkImg","Shield","isUp","App","initialState","turn","shielded","init","useReducer","state","nextTurn","Error","dispatch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5eb9fba8.chunk.js","sourcesContent":["import '../Score.css'\n\nexport const Score = function(props) {\n    const playerLabel = (props.id === 'y') ? \"Player 1\" : \"Player 2\";\n    const displayShipStatus = props.status.map((ship, index) => {\n        const sunk = ship.isSunk().toString();\n        const hits = Object.values(ship.coordinates).map((value, index) => {\n            return <div key={value.toString() + index + props.id} data-hit={value.toString()}></div>\n        })\n        return <div className=\"ship\" key={ship.toString() + index + props.id} data-sunk={sunk} data-ship={ship.type}>\n                    <div className=\"status\">\n                        <h1 className='type'>{ship.type}</h1>\n                        <div className='hits'>{hits}</div>\n                    </div> \n               </div>\n        }\n    );\n\n    return (\n        <div className=\"Score\" id={props.id}>\n            <label>{playerLabel}</label>\n            {displayShipStatus}\n        </div>\n    )\n}","import { Ship } from '../Models/Ship'\nimport { shuffleArray } from '../Utilities/shuffle.js'\nimport { useState, useEffect } from 'react'\nimport { Score } from './Score'\nimport '../Gameboard.css'\n\nexport const Gameboard = function(props) {\n    const shipTypes = [\n        ['Carrier', 5], \n        ['Battleship', 4], \n        ['Cruiser', 3], \n        ['Submarine', 3], \n        ['Destroyer', 2]\n    ];\n    const [targets, setTargets] = useState([\n        'A1','B1','C1','D1','E1','F1',\n        'A2','B2','C2','D2','E2','F2',\n        'A3','B3','C3','D3','E3','F3',\n        'A4','B4','C4','D4','E4','F4',\n        'A5','B5','C5','D5','E5','F5',\n        'A6','B6','C6','D6','E6','F6',\n    ]);\n    const [ships, setShips] = useState([]);\n    // placeShips() populates `ships` with Ship objects.\n    // [\n    //   {\n    //     type:Destroyer,\n    //     coordinates: { A1: false, B1: false }\n    //     hit: hit(),\n    //     isSunk: isSunk(),\n    //   },\n    //   {\n    //     type:Cruiser,\n    //     coordinates: { B2: false, C2: false, D2: false },\n    //     hit: hit(),\n    //     isSunk: isSunk(),\n    //    }\n    // ]\n    const placeShips = function() {\n        const grid = [\n            'A1','B1','C1','D1','E1','F1',\n            'A2','B2','C2','D2','E2','F2',\n            'A3','B3','C3','D3','E3','F3',\n            'A4','B4','C4','D4','E4','F4',\n            'A5','B5','C5','D5','E5','F5',\n            'A6','B6','C6','D6','E6','F6',\n        ];\n        // Returns coordinates as an array.\n        function getCoordinates(size, type) {\n            // Returns a 0 or 1, which determines if the ship is vertical or horizontal.\n            const orientation = Math.floor(Math.random() * Math.floor(2));\n            const horizontal = 0;\n            let available = [];\n            if (orientation === horizontal) {\n                // Returns the first valid placement for a horizontal ship of given length and marks those spaces in grid.\n                // Get all the rows of grid.\n                let rows = [];\n                let rowLength = 6;\n                let index;\n                for (index = 0; index <= 30; index += rowLength) {\n                    rows.push(grid.slice(index, index + rowLength));\n                }\n                // Find all available correctly-sized positions, e.g., [[A1, A2, A3], [B1, B2, B3]].\n                const max = rowLength - size;\n                let positions = null;\n                rows.forEach((row) => {\n                    for (let i = 0; i <= max; i++) {\n                        positions = row.slice(i, i + size);\n                        if (positions.includes(shipTypes[0][0])) {\n                            continue;\n                        } else if (positions.includes(shipTypes[1][0])) {\n                            continue;\n                        } else if (positions.includes(shipTypes[2][0])) {\n                            continue;\n                        } else if (positions.includes(shipTypes[3][0])) {\n                            continue;\n                        } else if (positions.includes(shipTypes[4][0])) {\n                            continue;\n                        } else {\n                            available.push(positions)\n                        }\n                    }\n                })\n            } else {\n                // Returns the first valid placement for a vertical ship and marks the spaces in the grid.\n                // Get all the columns in grid.\n                let columns = [];\n                const jump = 6;\n                for (let i = 0; i < jump; i++) {\n                    const column = [\n                        grid[i], \n                        grid[i+6], \n                        grid[i+(2*jump)], \n                        grid[i+(3*jump)], \n                        grid[i+(4*jump)], \n                        grid[i+(5*jump)]\n                    ]\n                    columns.push(column);\n                }\n                // Find all available correctly-sized positions, e.g., [[A1, B1, C1], [A2, B2, C2]].\n                const columnHeight = 6;\n                const max = columnHeight - size;\n                let positions = null;\n                columns.forEach((column) => {\n                    for (let i = 0; i <= max; i++) {\n                        positions = column.slice(i, i + size);\n                        if (positions.includes(shipTypes[0][0])) {\n                            continue;\n                        } else if (positions.includes(shipTypes[1][0])) {\n                            continue;\n                        } else if (positions.includes(shipTypes[2][0])) {\n                            continue;\n                        } else if (positions.includes(shipTypes[3][0])) {\n                            continue;\n                        } else if (positions.includes(shipTypes[4][0])) {\n                            continue;\n                        } else {\n                            available.push(positions)\n                        }\n                    }\n                })\n            }\n            // Assign the first item in `available` to `selectedAvailable` and mark those positions in grid.\n            const selectedAvailable = available.shift();\n            for (let i = 0; i < selectedAvailable.length; i++) {\n                const isMatch = (value) => value === selectedAvailable[i];\n                const indexOfMatch = grid.findIndex(isMatch);\n                grid[indexOfMatch] = type;\n            }\n            // Return the coordinates to be used in creating your Ship object.\n            const coordinates = {};\n            // Add 'false' to each, to indicate that position is not hit.\n            selectedAvailable.forEach(position => {\n                coordinates[position] = false;\n            })\n            console.log(coordinates);\n            return coordinates;\n        }\n        // Create Ships in a different order each game.\n        shuffleArray(shipTypes);\n        const ships = [];\n        shipTypes.forEach(shipType => {\n            const type = shipType[0];\n            const size = shipType[1];\n            const coordinates = getCoordinates(size, type);\n            const ship = Ship(type, coordinates, size);\n            ships.push(ship);\n        });\n        setShips(ships);\n    }\n\n    // Calls isSunk() on each Ship. If 5 Ships are sunk, executes callback gameDidEnd to let App know.\n    const isGameOver = function() {\n        let sunkShips = [];\n        ships.forEach(ship => {\n            if (ship.isSunk() === true) {\n                sunkShips.push(true)\n            }\n        })\n        if (sunkShips.length === 5) {\n            props.action({type: 'gameover'});\n        }\n    }\n\n    // Takes a single coordinate, checks if that is part of a ship, and updates the ship accordingly.\n    // Updates state, then lets App know the turn is over.\n    const receiveAttack = function(coords) {\n        const current = targets.slice(0);\n        let hit;\n        ships.forEach((ship) => {\n            const keys = Object.keys(ship.coordinates);\n            if (keys.includes(coords)) {\n                ship.hit(coords)\n                hit = true\n                if (ship.isSunk()) {\n                    props.action({type: 'sunk', payload: ship.type})\n                } else {\n                    props.action({type: 'hit', payload: ship.type})\n                }\n            }\n        })\n        const isMatch = (value) => value === coords;\n        const indexOfMatch = current.findIndex(isMatch);\n        if (hit) {\n            current[indexOfMatch] = 'hit';\n        } else {\n            current[indexOfMatch] = 'miss';\n            props.action({type: 'miss', payload: coords})\n        }\n        setTargets(current);\n        window.setTimeout(props.action, 3*1000, {type: 'turnOver'})\n    }\n\n    // Create a div for each potential attack target.\n    const displayAttacks = targets.map((coords, index) =>\n        <button \n            key={coords.toString() + index}\n            className={index} \n            data-coordinate={coords}\n        >\n            {coords}\n        </button>\n    );\n\n    useEffect(() => {\n        placeShips();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        isGameOver();\n    })\n\n    const isVisible = props.isVisible;\n\n    if (isVisible) {\n        return (\n            <div className=\"gameboard\">\n                <div \n                    className=\"grid active\"\n                    onClick={(event) => {\n                        event.preventDefault();\n                        const parent = event.currentTarget;\n                        const elem = event.target;\n                        parent.classList.add('animate');\n                        const attackTarget = elem.dataset.coordinate;\n                        props.action({type: 'attack', payload: attackTarget})\n                        window.setTimeout(receiveAttack, 1*1000, attackTarget)\n                    }}\n                >{displayAttacks}</div>\n                    <Score \n                        status={ships}\n                        id={props.id}\n                    />\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"gameboard\">\n                <div className=\"grid hidden\">{displayAttacks}</div>\n                <Score \n                    status={ships}\n                    id={props.id}\n                />\n            </div>\n        )\n    }\n}","// Shuffle helper function to randomize the order that ships are processed with each new game.\nexport const shuffleArray = function(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}","// Returns an individual Ship object with methods.\nexport const Ship = function(type, coordinates, size) {\n    // These methods to be called if Gameboard finds an attack corresponds to a target.\n    const hit = function(key) {\n        this.coordinates[key] = true\n    }\n    const isSunk = function() {\n        const hitTargets = Object.values(this.coordinates);\n        const isTrue = (value) => value === true;\n        return hitTargets.every(isTrue)\n    }\n    return {type, coordinates, hit, isSunk}\n}","export default __webpack_public_path__ + \"static/media/hit.a9ac7f37.gif\";","export default __webpack_public_path__ + \"static/media/waves.c57afa7a.gif\";","export default __webpack_public_path__ + \"static/media/sunk.d97c576e.gif\";","import '../Message.css'\nimport hitImg from '../images/hit.gif'\nimport wavesImg from '../images/waves.gif'\nimport sunkImg from '../images/sunk.gif'\n\nexport const Message = function(props) {\n    const hit = 'HIT';\n    const miss = 'MISS';\n    const sunk = 'SUNK';\n    if (props.message.includes(hit)) {\n        return (\n            <div className=\"Message\">\n                <h1>{props.message}</h1>\n                <img src={hitImg} alt=\"hit\"></img>\n            </div>\n        )\n    } else if (props.message.includes(miss)) {\n        return (\n            <div className=\"Message\">\n                <h1>{props.message}</h1>\n                <img src={wavesImg} alt=\"waves\"></img>\n            </div>\n        )\n    } else if (props.message.includes(sunk)) {\n        return (\n            <div className=\"Message\">\n                <h1>{props.message}</h1>\n                <img src={sunkImg} alt=\"sunk\"></img>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"Message\">\n                <h1>{props.message}</h1>\n            </div>\n        )\n    }\n}","import '../Shield.css'\n\nexport const Shield = function(props) {\n    if (props.isUp) {\n        return (\n            <div className=\"Shield\">\n                <h1>{props.message}</h1>\n                <button onClick={() => {props.action({type: 'shieldDismissed'})}}>READY</button>\n            </div>\n        )\n    } else {\n        return (\n            null\n        )\n    }\n}","import { Gameboard } from './Components/Gameboard'\nimport { useReducer } from 'react'\nimport { Message } from \"./Components/Message\";\nimport { Shield } from \"./Components/Shield\"\nimport './App.css';\n\nfunction App() {\n  const initialState = {\n    message:`Let's play Battleship!`, \n    turn: 1,\n    shielded: false,\n  };\n\n  function init(initialState) {\n    return initialState;\n  }\n\n  const reducer = function(state, action) {\n    switch (action.type) {\n      case 'turnOver':\n        const nextTurn = (state.turn === 1) ? 2 : 1;\n        return {message: 'Ready Player ' + nextTurn + '?', turn: nextTurn, shielded: true}\n      case 'shieldDismissed':\n        return {message: 'Awaiting your command...', turn: state.turn, shielded: false}\n      case 'attack':\n        return {message: 'Launching attack on ' + action.payload + ' ...', turn: state.turn, shielded: false};\n      case 'hit':\n        return {message: action.payload + ' HIT!', turn: state.turn, shielded: false};\n      case 'miss':\n        return {message: 'Attack was a MISS!', turn: state.turn, shielded: false};\n      case 'sunk':\n        return {message: action.payload + ' SUNK!', turn: state.turn, shielded: false};\n      case 'gameover':\n        return {message: 'Game Over', turn: state.turn, shielded: false};\n      case 'playAgain':\n        return init(initialState);\n      default:\n        throw new Error();\n    }\n  }\n\n  const [state, dispatch] = useReducer(reducer, initialState, init)\n\n  const isVisible = state.turn === 1;\n\n  return (\n    <div className=\"App\">\n      <Shield \n        isUp={state.shielded}\n        message={state.message}\n        action={dispatch}\n      />\n      <Message \n        message={state.message}\n      />\n      <Gameboard\n        isVisible={isVisible}\n        id={\"x\"}\n        action={dispatch}\n      />\n      <Gameboard\n        isVisible={!isVisible}\n        id={\"y\"}\n        action={dispatch} \n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}