{"version":3,"sources":["models/Ship.js","utilities/shuffle.js","models/Gameboard.js","models/Player.js","views/Board.js","App.js","index.js"],"names":["Ship","type","coordinates","size","targets","hit","push","isSunk","length","shuffleArray","array","i","j","Math","floor","random","Gameboard","shipTypes","yourShips","yourAttacks","activeGame","placeShips","getCoordinates","index","rows","slice","max","available","positions","forEach","row","includes","shift","indexOfMatch","findIndex","value","rowLookup","columns","column","columnLookup","shipType","ship","console","table","receiveAttack","coords","isGameOver","sunkShips","Player","getComputerAttackTarget","previousAttacks","unattacked","coordinate","pop","getPlayerAttackTarget","event","preventDefault","target","dataset","Board","props","attackGrid","map","attack","data-coordinate","onClick","getPlayerInput","toString","className","App","gameboard","player","useState","setAttackGrid","playerInput","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9420ee2.chunk.js","sourcesContent":["// Returns an individual Ship object with methods.\nconst Ship = function(type, coordinates, size) {\n    let targets = [];\n    // Initially all targets are not hit, so empty array. \n    // These methods to be called if Gameboard finds an attack corresponds to a target.\n    const hit = function() {\n        targets.push(true);\n    }\n    const isSunk = function() {\n        return (targets.length === size)\n    }\n    return {type, coordinates, targets, hit, isSunk}\n}\n\nexport default Ship","// Shuffle helper function to randomize the order that ships are processed with each new game.\nconst shuffleArray = function(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}\n\nexport default shuffleArray;","import Ship from './Ship'\nimport shuffleArray from '../utilities/shuffle.js'\n\nconst Gameboard = function() {\n    const shipTypes = [\n        ['Carrier', 5], \n        ['Battleship', 4], \n        ['Cruiser', 3], \n        ['Submarine', 3], \n        ['Destroyer', 2]\n    ];\n    const yourShips = [\n        'A1','B1','C1','D1','E1','F1',\n        'A2','B2','C2','D2','E2','F2',\n        'A3','B3','C3','D3','E3','F3',\n        'A4','B4','C4','D4','E4','F4',\n        'A5','B5','C5','D5','E5','F5',\n        'A6','B6','C6','D6','E6','F6',\n    ];\n    const yourAttacks = [\n        'A1','B1','C1','D1','E1','F1',\n        'A2','B2','C2','D2','E2','F2',\n        'A3','B3','C3','D3','E3','F3',\n        'A4','B4','C4','D4','E4','F4',\n        'A5','B5','C5','D5','E5','F5',\n        'A6','B6','C6','D6','E6','F6',\n    ];\n    \n    // Returns the first valid placement for a horizontal ship of given length and marks those spaces in yourShips.\n    const rowLookup = function(size, type) {\n        // Get the 6 rows, starting with yourShips[0].\n        // Store in an array of arrays, each item a row.\n        // Row start indices are 6 apart since 6x6 yourShips.\n        let rows = [];\n        let rowLength = 6;\n        let index;\n        for (index = 0; index <= 30; index += rowLength) {\n            rows.push(yourShips.slice(index, index + rowLength));\n        }\n        // Build array of all available correctly-sized positions.\n        const max = rowLength - size;\n        let available = [];\n        let positions = null;\n        rows.forEach((row) => {\n            for (let i = 0; i <= max; i++) {\n                positions = row.slice(i, i + size);\n                if (positions.includes(shipTypes[0][0])) {\n                    continue;\n                } else if (positions.includes(shipTypes[1][0])) {\n                    continue;\n                } else if (positions.includes(shipTypes[2][0])) {\n                    continue;\n                } else if (positions.includes(shipTypes[3][0])) {\n                    continue;\n                } else if (positions.includes(shipTypes[4][0])) {\n                    continue;\n                } else {\n                    available.push(positions)\n                }\n            }\n        })\n        // Assign the first available to coordinates and mark those positions.\n        const coordinates = available.shift();\n        for (let i = 0; i < coordinates.length; i++) {\n            const isMatch = (value) => value === coordinates[i];\n            const indexOfMatch = yourShips.findIndex(isMatch);\n            yourShips[indexOfMatch] = type;\n        }\n        return coordinates;\n    }\n\n    // Returns the first valid placement for a vertical ship and marks the spaces in the yourShips.\n    const columnLookup = function(size, type) {\n        // Get the 6 columns, starting with yourShips[0].\n        // Store in an array of arrays, each item a column.\n        let columns = [];\n        const jump = 6;\n        for (let i = 0; i < jump; i++) {\n            const column = [\n                yourShips[i], \n                yourShips[i+6], \n                yourShips[i+(2*jump)], \n                yourShips[i+(3*jump)], \n                yourShips[i+(4*jump)], \n                yourShips[i+(5*jump)]\n            ]\n            columns.push(column);\n        }\n        // Build array of all available correctly-sized positions.\n        // Columns are 6 high because 6x6 yourShips.\n        const columnHeight = 6;\n        const max = columnHeight - size;\n        let available = [];\n        let positions = null;\n        columns.forEach((column) => {\n            for (let i = 0; i <= max; i++) {\n                positions = column.slice(i, i + size);\n                if (positions.includes(shipTypes[0][0])) {\n                    continue;\n                } else if (positions.includes(shipTypes[1][0])) {\n                    continue;\n                } else if (positions.includes(shipTypes[2][0])) {\n                    continue;\n                } else if (positions.includes(shipTypes[3][0])) {\n                    continue;\n                } else if (positions.includes(shipTypes[4][0])) {\n                    continue;\n                } else {\n                    available.push(positions)\n                }\n            }\n        })\n        // Assign the first available to coordinates and mark those positions.\n        const coordinates = available.shift();\n        for (let i = 0; i < coordinates.length; i++) {\n            const isMatch = (value) => value === coordinates[i];\n            const indexOfMatch = yourShips.findIndex(isMatch);\n            yourShips[indexOfMatch] = type;\n        }\n        return coordinates;\n    }\n\n    // Returns the active gameboard as an array of objects.\n    // [\n    //   {\n    //     type:Destroyer,\n    //     coordinates:[A1,B1], \n    //     targets:[false,false],\n    //     hit: hit(),\n    //     isSunk: isSunk(),\n    //   },\n    //   {\n    //     type:Cruiser,\n    //     coordinates:[B2,C2,D2], \n    //     targets:[false,false,false],\n    //     hit: hit(),\n    //     isSunk: isSunk(),\n    //    }\n    // ]\n    const activeGame = [];\n    const placeShips = function() {\n        // Returns coordinates as an array.\n        function getCoordinates(size, type) {\n            // Returns a 0 or 1, which determines if the ship is vertical or horizontal.\n            const orientation = Math.floor(Math.random() * Math.floor(2));\n            const horizontal = 0;\n            if(orientation === horizontal) {\n                return rowLookup(size, type);\n            } else {\n                return columnLookup(size, type);\n            }\n        }\n        shuffleArray(shipTypes);\n        shipTypes.forEach(shipType => {\n            const type = shipType[0];\n            const size = shipType[1];\n            const coordinates = getCoordinates(size, type);\n            const ship = Ship(type, coordinates, size);\n            activeGame.push(ship);\n        });\n        console.table(activeGame);\n        return activeGame;\n    }\n\n    const isGameOver = function() {\n        let sunkShips = [];\n        activeGame.forEach(ship => {\n            if (ship.isSunk() === true) {\n                sunkShips.push(true)\n            }\n        })\n        if (sunkShips.length === 5) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    const receiveAttack = function(coords) {\n        let hit;\n        activeGame.forEach(ship => {\n            if (ship.coordinates.includes(coords)) {\n                ship.hit()\n                hit = true\n            }\n        })\n        const isMatch = (value) => value === coords;\n        const indexOfMatch = yourAttacks.findIndex(isMatch);\n        if (hit) {\n            yourAttacks[indexOfMatch] = 'hit';\n        } else {\n            yourAttacks[indexOfMatch] = 'miss';\n        }\n    }\n\n\n    return { placeShips, receiveAttack, isGameOver, yourAttacks }\n}\n\nexport default Gameboard","import shuffleArray from '../utilities/shuffle.js'\n\nconst Player = function() {\n    // This can be called in order to get a target from the computer player.\n    const getComputerAttackTarget = function(previousAttacks) {\n        const unattacked = [];\n        previousAttacks.forEach(coordinate => {\n            if (coordinate !== 'hit' && coordinate !== 'miss') {\n                unattacked.push(coordinate);\n            }\n        });\n        shuffleArray(unattacked);\n        const attackTarget = unattacked.pop();\n        return attackTarget;\n    }\n    // This unpacks Player 1's event received from the DOM.\n    const getPlayerAttackTarget = function(event) {\n        event.preventDefault();\n        const elem = event.target;\n        const attackTarget = elem.dataset.coordinate;\n        return attackTarget;\n    }\n    return { getComputerAttackTarget, getPlayerAttackTarget }\n}\n\nexport default Player","const Board = function(props) {\n    const attacks = props.attackGrid;\n    const attackGrid = attacks.map((attack) =>\n        <button \n            key={attack.toString()} \n            data-coordinate={attack}\n            onClick={props.getPlayerInput}>player1 {attack}</button>\n    );  \n    return (\n        <div>\n            <div className=\"player1\">\n                {attackGrid}\n            </div>\n        </div>\n    )\n}\n\nexport default Board","import Gameboard from './models/Gameboard'\nimport Player from './models/Player'\nimport Board from './views/Board';\nimport { useState } from 'react'\n\nfunction App() {\n  const gameboard = Gameboard();\n  const player = Player();\n  const [ships, setShips] = useState(gameboard.placeShips());\n  const [attackGrid, setAttackGrid] = useState(gameboard.yourAttacks);\n\n  const turn = function(playerInput) {\n    const target = (playerInput) ? player.getPlayerAttackTarget(playerInput) : player.getComputerAttackTarget();\n    gameboard.receiveAttack(target);\n    setAttackGrid(gameboard.yourAttacks);\n    console.log(gameboard.isGameOver());\n  }\n  return (\n    <div className=\"App\">\n      <Board \n        attackGrid={attackGrid}\n        getPlayerInput={turn} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}